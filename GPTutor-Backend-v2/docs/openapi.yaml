openapi: 3.0.3
info:
  title: GPTutor Backend v2 API
  version: 2.0.0
  description: |
    # GPTutor API

    GPTutor предоставляет единый API для доступа к различным AI-моделям через один endpoint. Автоматически обрабатывает fallback'и и выбирает наиболее экономичные варианты.

    ## Быстрый старт

    ### Использование с OpenAI SDK

    **Python:**
    ```python
    from openai import OpenAI

    client = OpenAI(
        base_url="http://localhost:3001/v1",
        api_key="your-api-key-here"
    )

    completion = client.chat.completions.create(
        model="google/gemini-2.5-flash-lite",
        messages=[
            {"role": "user", "content": "Привет! Как дела?"}
        ]
    )

    print(completion.choices[0].message.content)
    ```

    **JavaScript:**
    ```javascript
    import OpenAI from 'openai';

    const openai = new OpenAI({
      baseURL: 'http://localhost:3001/v1',
      apiKey: 'your-api-key-here'
    });

    const completion = await openai.chat.completions.create({
      model: 'google/gemini-2.5-flash-lite',
      messages: [
        { role: 'user', content: 'Привет! Как дела?' }
      ]
    });

    console.log(completion.choices[0].message.content);
    ```

    ### Прямое использование API

    ```bash
    curl -X POST http://localhost:3001/v1/chat/completions \
      -H "Authorization: Bearer your-api-key-here" \
      -H "Content-Type: application/json" \
      -d '{
        "model": "google/gemini-2.5-flash-lite",
        "messages": [
          {"role": "user", "content": "Привет!"}
        ]
      }'
    ```

    ## Streaming

    API поддерживает streaming ответы от любой модели. Это полезно для создания чат-интерфейсов или других приложений, где UI должен обновляться по мере генерации ответа.

    **Python:**
    ```python
    import requests
    import json

    response = requests.post(
        'http://localhost:3001/v1/chat/completions',
        headers={'Authorization': 'Bearer your-api-key-here'},
        json={
            'model': 'google/gemini-2.5-flash-lite',
            'messages': [{'role': 'user', 'content': 'Расскажи историю'}],
            'stream': True
        },
        stream=True
    )

    for line in response.iter_lines():
        if line:
            line_text = line.decode('utf-8')
            if line_text.startswith('data: '):
                data = line_text[6:]
                if data == '[DONE]':
                    break
                try:
                    parsed = json.loads(data)
                    content = parsed['choices'][0]['delta'].get('content')
                    if content:
                        print(content, end='', flush=True)
                except json.JSONDecodeError:
                    pass
    ```

    **JavaScript:**
    ```javascript
    const response = await fetch('http://localhost:3001/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer your-api-key-here',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash-lite',
        messages: [{ role: 'user', content: 'Расскажи историю' }],
        stream: true
      })
    });

    const reader = response.body.getReader();
    const decoder = new TextDecoder();

    while (true) {
      const { done, value } = await reader.read();
      if (done) break;
      
      const chunk = decoder.decode(value);
      const lines = chunk.split('\n');
      
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6);
          if (data === '[DONE]') continue;
          
          try {
            const parsed = JSON.parse(data);
            const content = parsed.choices?.[0]?.delta?.content;
            if (content) {
              process.stdout.write(content);
            }
          } catch (e) {
            // Игнорируем ошибки парсинга
          }
        }
      }
    }
    ```

    ## Аутентификация

    API использует Bearer токены для аутентификации. Получите ваш API ключ у администратора системы.

    ```bash
    curl -H "Authorization: Bearer your-api-key-here" \
         http://localhost:3001/v1/chat/completions
    ```

    ## Стоимость

    Стоимость рассчитывается автоматически на основе токенов и списывается с баланса пользователя. Информация о стоимости включена в каждый ответ.

  contact:
    name: GPTutor Support
    url: https://gptutor.site
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api.openai.com/
    description: Production server

tags:
  - name: Chat Completions
    description: OpenAI-совместимые chat completions с поддержкой streaming
  - name: Chat Models
    description: Управление и получение информации о доступных моделях LLM
  - name: Files
    description: Управление файлами - загрузка, удаление и получение списка файлов пользователя

paths:
  /v1/chat/completions:
    post:
      tags: [Chat Completions]
      summary: Создание chat completion
      description: |
        Создание chat completion с поддержкой streaming.
        
        ## Параметры
        
        - `model` - модель для генерации (по умолчанию: google/gemini-2.5-flash-lite)
        - `messages` - массив сообщений для контекста
        - `stream` - включить streaming режим
        - `max_tokens` - максимальное количество токенов
        - `temperature` - креативность ответа (0.0-1.0)
        
        ## Streaming
        
        При `stream: true` ответ приходит в формате Server-Sent Events:
        
        ```
        data: {"choices":[{"delta":{"content":"Hello"}}]}
        data: {"choices":[{"delta":{"content":" there!"}}]}
        data: [DONE]
        ```
        
        ## Стоимость
        
        Стоимость рассчитывается автоматически и списывается с баланса пользователя. Информация о стоимости включена в каждый ответ.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
            examples:
              simple:
                summary: Простой запрос
                value:
                  model: "google/gemini-2.5-flash-lite"
                  messages:
                    - role: "user"
                      content: "Привет! Как дела?"
              streaming:
                summary: Streaming запрос
                value:
                  model: "google/gemini-2.5-flash-lite"
                  messages:
                    - role: "user"
                      content: "Расскажи историю"
                  stream: true
                  max_tokens: 150
              advanced:
                summary: Продвинутый запрос
                value:
                  model: "anthropic/claude-3-haiku"
                  messages:
                    - role: "user"
                      content: "Объясни квантовую физику простыми словами"
                  max_tokens: 500
                  temperature: 0.7
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
              examples:
                non_streaming:
                  summary: Обычный ответ
                  value:
                    id: "chatcmpl-abc123"
                    object: "chat.completion"
                    created: 1677652288
                    model: "google/gemini-2.5-flash-lite"
                    choices:
                      - index: 0
                        message:
                          role: "assistant"
                          content: "Привет! У меня всё отлично, спасибо!"
                        finish_reason: "stop"
                    usage:
                      prompt_tokens: 4
                      completion_tokens: 147
                      total_tokens: 151
                      cost: 0.0000592
                      prompt_tokens_details:
                        cached_tokens: 0
                        audio_tokens: 0
                      cost_details:
                        upstream_inference_completions_cost: 0.0053
                      completion_tokens_details:
                        reasoning_tokens: 0
                        image_tokens: 0
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events для streaming режима
              examples:
                streaming:
                  summary: Streaming ответ
                  value: |
                    data: {"id":"chatcmpl-abc123","object":"chat.completion.chunk","created":1677652288,"model":"google/gemini-2.5-flash-lite","choices":[{"index":0,"delta":{"role":"assistant","content":""},"finish_reason":null}]}
                    
                    data: {"id":"chatcmpl-abc123","object":"chat.completion.chunk","created":1677652288,"model":"google/gemini-2.5-flash-lite","choices":[{"index":0,"delta":{"content":"Привет"},"finish_reason":null}]}
                    
                    data: {"id":"chatcmpl-abc123","object":"chat.completion.chunk","created":1677652288,"model":"google/gemini-2.5-flash-lite","choices":[{"index":0,"delta":{"content":"!"},"finish_reason":null}]}
                    
                    data: {"id":"chatcmpl-abc123","object":"chat.completion.chunk","created":1677652288,"model":"google/gemini-2.5-flash-lite","choices":[{"index":0,"delta":{},"finish_reason":"stop"}]}
                    
                    data: [DONE]
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '402':
          $ref: '#/components/responses/InsufficientBalance'
        '500':
          $ref: '#/components/responses/InternalError'

  /v1/models:
    get:
      tags: [ChatModels]
      summary: Получить список доступных моделей
      description: |
        Получить список моделей от популярных провайдеров с ценами в рублях.
        **Поддерживаемые провайдеры:** x-ai, deepseek, google, qwen, perplexity, mistralai, openai
        
        ## Ценообразование
        
        Все цены возвращаются в рублях:

      responses:
        '200':
          description: Список моделей успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      models:
                        type: array
                        items:
                          $ref: '#/components/schemas/Model'
                      total:
                        type: integer
                        description: Общее количество моделей
                        example: 45
                      providers:
                        type: array
                        items:
                          type: string
                        description: Список поддерживаемых провайдеров
                        example: ["x-ai", "deepseek", "google", "qwen", "perplexity", "mistralai", "openai"]
                      lastUpdated:
                        type: string
                        format: date-time
                        description: Время последнего обновления
                        example: "2025-01-28T10:30:00.000Z"
              examples:
                success:
                  summary: Успешный ответ
                  value:
                    success: true
                    data:
                      models:
                        - id: "google/gemini-2.5-flash-lite-preview-09-2025"
                          name: "Google: Gemini 2.5 Flash Lite Preview 09-2025"
                          description: "Gemini 2.5 Flash-Lite is a lightweight reasoning model..."
                          context_length: 1048576
                          pricing_rub:
                            prompt: 0.000009
                            completion: 0.000036
                            request: 0
                            image: 0
                            web_search: 0
                            internal_reasoning: 0

                      total: 45
                      providers: ["x-ai", "deepseek", "google", "qwen", "perplexity", "mistralai", "openai"]
                      lastUpdated: "2025-01-28T10:30:00.000Z"
        '503':
          description: Сервис моделей не готов
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Models service not ready"
        '500':
          $ref: '#/components/responses/InternalError'

  /user:
    get:
      tags: [Authentication]
      summary: Получить данные пользователя
      description: |
        Получает информацию о пользователе, включая баланс, API ключ и данные VK.
        
        Требует VK подпись в заголовке Authorization.
      security:
        - VkAuth: []
      responses:
        '200':
          description: Данные пользователя получены успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "User data retrieved successfully!"
                      vkData:
                        type: object
                        description: "Данные от VK"
                      dbUser:
                        type: object
                        properties:
                          id:
                            type: string
                          vkId:
                            type: string
                          balance:
                            type: number
                          apiKey:
                            type: string
                          isActive:
                            type: boolean
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
                      timestamp:
                        type: string
                        format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /update-token:
    post:
      tags: [Authentication]
      summary: Обновление API токена
      description: |
        Генерирует новый API ключ для пользователя. Старый ключ становится недействительным.
        
        Требует VK авторизацию.
      security:
        - VkAuth: []
      responses:
        '200':
          description: Токен успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "API token updated successfully!"
                      newApiKey:
                        type: string
                        description: "Новый API ключ"
                        example: "sk-abc123..."
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                          vkId:
                            type: string
                          balance:
                            type: number
                          isActive:
                            type: boolean
                          updatedAt:
                            type: string
                            format: date-time
                      timestamp:
                        type: string
                        format: date-time
              examples:
                success:
                  summary: Успешное обновление токена
                  value:
                    success: true
                    data:
                      message: "API token updated successfully!"
                      newApiKey: "sk-abc123def456ghi789jkl012mno345pqr678stu901vwx234yz567890"
                      user:
                        id: "user_123"
                        vkId: "vk_456"
                        balance: 10.5
                        isActive: true
                        updatedAt: "2024-01-15T10:30:00Z"
                      timestamp: "2024-01-15T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /upload:
    post:
      tags: [Files]
      summary: Загрузить файл
      description: |
        Загружает файл в облачное хранилище Yandex S3 с автоматической оптимизацией.
        
        ## Поддерживаемые типы файлов
        
        ### Изображения
        - JPG, JPEG, PNG, GIF, BMP, SVG, WebP, TIFF, TIF
        - Автоматически оптимизируются (качество 60%)
        
        ### Документы
        - PDF (сжатие)
        - DOC, DOCX, XLS, XLSX, CSV
        
        ### Текстовые файлы
        - TXT, JS, HTML, CSS, JSON, XML, MD, LOG
        - PY, JAVA, C, CPP, H, SH, CONFIG, CONF, INI
        - YML, YAML, SQL
        
        ## Ограничения
        
        - Максимальный размер файла: 50MB
        - Требует VK авторизацию
        - Файлы автоматически оптимизируются и сжимаются
        
        ## Ответ
        
        Возвращает информацию о загруженном файле включая URL для доступа.
      security:
        - VkAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Файл для загрузки
            examples:
              image:
                summary: Загрузка изображения
                value:
                  file: "[binary data]"
              document:
                summary: Загрузка документа
                value:
                  file: "[binary data]"
      responses:
        '200':
          description: Файл успешно загружен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "File uploaded successfully!"
                      file:
                        $ref: '#/components/schemas/FileInfo'
                      timestamp:
                        type: string
                        format: date-time
              examples:
                success:
                  summary: Успешная загрузка
                  value:
                    success: true
                    data:
                      message: "File uploaded successfully!"
                      file:
                        id: "file_123"
                        name: "document.pdf"
                        type: "application/pdf"
                        url: "https://gptutor-bucket.storage.yandexcloud.net/uuid.pdf"
                        size: 1024000
                        createdAt: "2024-01-15T10:30:00Z"
                      timestamp: "2024-01-15T10:30:00Z"
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    examples:
                      - "No file provided"
                      - "Unsupported file type"
                      - "Invalid filename"
                      - "File too large. Maximum size is 50MB"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Файл слишком большой
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "File too large. Maximum size is 50MB"
        '500':
          $ref: '#/components/responses/InternalError'

  /files:
    get:
      tags: [Files]
      summary: Получить список файлов пользователя
      description: |
        Возвращает список всех файлов, загруженных пользователем.
        
        ## Возвращаемые данные
        
        - Список файлов с метаданными
        - Общее количество файлов
        - Информация о каждом файле (ID, имя, тип, URL, размер, дата создания)
      security:
        - VkAuth: []
      responses:
        '200':
          description: Список файлов успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Files retrieved successfully!"
                      files:
                        type: array
                        items:
                          $ref: '#/components/schemas/FileInfo'
                      total:
                        type: integer
                        example: 5
                      timestamp:
                        type: string
                        format: date-time
              examples:
                success:
                  summary: Список файлов
                  value:
                    success: true
                    data:
                      message: "Files retrieved successfully!"
                      files:
                        - id: "file_123"
                          name: "document.pdf"
                          type: "application/pdf"
                          url: "https://gptutor-bucket.storage.yandexcloud.net/uuid.pdf"
                          size: 1024000
                          createdAt: "2024-01-15T10:30:00Z"
                        - id: "file_456"
                          name: "image.jpg"
                          type: "image/jpeg"
                          url: "https://gptutor-bucket.storage.yandexcloud.net/uuid.jpg"
                          size: 512000
                          createdAt: "2024-01-15T09:15:00Z"
                      total: 2
                      timestamp: "2024-01-15T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /files/{fileId}:
    delete:
      tags: [Files]
      summary: Удалить файл
      description: |
        Удаляет файл по его ID. Файл удаляется как из облачного хранилища, так и из базы данных.
        
        ## Ограничения
        
        - Можно удалять только свои файлы
        - Требует VK авторизацию
        - Файл должен существовать
        
        ## Параметры
        
        - `fileId` - ID файла для удаления
      security:
        - VkAuth: []
      parameters:
        - name: fileId
          in: path
          required: true
          description: ID файла для удаления
          schema:
            type: string
            example: "file_123"
      responses:
        '200':
          description: Файл успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "File deleted successfully!"
                      fileId:
                        type: string
                        example: "file_123"
                      timestamp:
                        type: string
                        format: date-time
              examples:
                success:
                  summary: Успешное удаление
                  value:
                    success: true
                    data:
                      message: "File deleted successfully!"
                      fileId: "file_123"
                      timestamp: "2024-01-15T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Access denied"
        '404':
          description: Файл не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "File not found"
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    ApiKeyBearer:
      type: http
      scheme: bearer
      description: |
        API ключ пользователя для доступа к LLM endpoints.
    VkAuth:
      type: http
      scheme: bearer
      description: |
        VK подпись для авторизации через VK приложение.
        Передается в заголовке Authorization как Bearer token.

  schemas:
    ChatCompletionRequest:
      type: object
      required: [messages]
      properties:
        model:
          type: string
          default: "google/gemini-2.5-flash-lite"
          example: "google/gemini-2.5-flash-lite"
          description: |
            Модель для генерации ответа. Поддерживаются все модели OpenRouter.
            
            **Популярные модели:**
            - `google/gemini-2.5-flash-lite` - быстрая и дешевая
            - `anthropic/claude-3-haiku` - сбалансированная
            - `openai/gpt-4o-mini` - OpenAI модель
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          example:
            - role: "user"
              content: "Привет!"
        max_tokens:
          type: integer
          minimum: 1
          maximum: 4000
          example: 150
          description: Максимальное количество токенов в ответе
        temperature:
          type: number
          minimum: 0
          maximum: 2
          example: 0.7
          description: Креативность ответа (0 = детерминированный, 2 = очень креативный)
        top_p:
          type: number
          minimum: 0
          maximum: 1
          example: 0.9
          description: Nucleus sampling параметр
        frequency_penalty:
          type: number
          minimum: -2
          maximum: 2
          example: 0
          description: Штраф за повторение слов
        presence_penalty:
          type: number
          minimum: -2
          maximum: 2
          example: 0
          description: Штраф за повторение тем
        stop:
          type: array
          items:
            type: string
          example: ["\n", "###"]
          description: Стоп-последовательности для завершения генерации
        stream:
          type: boolean
          default: false
          example: true
          description: Включить streaming режим (Server-Sent Events)

    ChatMessage:
      type: object
      required: [role, content]
      properties:
        role:
          type: string
          enum: [system, user, assistant]
          example: "user"
          description: |
            Роль отправителя сообщения:
            - `system` - системные инструкции для AI
            - `user` - сообщения пользователя  
            - `assistant` - ответы AI
        content:
          type: string
          example: "Привет! Как дела?"
          description: Текст сообщения

    ChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
          example: "chatcmpl-abc123"
        object:
          type: string
          example: "chat.completion"
        created:
          type: integer
          example: 1677652288
        model:
          type: string
          example: "google/gemini-2.5-flash-lite"
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatChoice'
        usage:
          $ref: '#/components/schemas/Usage'

    ChatChoice:
      type: object
      properties:
        index:
          type: integer
          example: 0
        message:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          type: string
          enum: [stop, length, content_filter]
          example: "stop"

    Usage:
      type: object
      description: |
        Информация об использовании токенов и стоимости.
        
        **Структура ответа:**
        - `prompt_tokens` - токены запроса
        - `completion_tokens` - токены ответа  
        - `total_tokens` - всего токенов
        - `cost` - цена в долларах
        - `cost_details.upstream_inference_completions_cost` - цена в рублях
        - `prompt_tokens_details` - детали токенов запроса
        - `completion_tokens_details` - детали токенов ответа
      properties:
        prompt_tokens:
          type: integer
          example: 4
          description: Количество токенов в запросе
        completion_tokens:
          type: integer
          example: 147
          description: Количество токенов в ответе
        total_tokens:
          type: integer
          example: 151
          description: Общее количество токенов
        cost:
          type: number
          format: float
          example: 0.0000592
          description: Стоимость запроса в долларах
        prompt_tokens_details:
          type: object
          properties:
            cached_tokens:
              type: integer
              example: 0
              description: Количество кешированных токенов
            audio_tokens:
              type: integer
              example: 0
              description: Количество аудио токенов
        cost_details:
          type: object
          properties:
            upstream_inference_completions_cost:
              type: number
              format: float
              example: 0.0053
              description: Стоимость запроса в рублях
        completion_tokens_details:
          type: object
          properties:
            reasoning_tokens:
              type: integer
              example: 0
              description: Количество токенов рассуждения
            image_tokens:
              type: integer
              example: 0
              description: Количество токенов изображений

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Invalid API key"

    Model:
      type: object
      description: Модель LLM с ценами в рублях
      properties:
        id:
          type: string
          description: Уникальный идентификатор модели
          example: "google/gemini-2.5-flash-lite-preview-09-2025"
        canonical_slug:
          type: string
          description: Канонический слаг модели
          example: "google/gemini-2.5-flash-lite-preview-09-2025"
        hugging_face_id:
          type: string
          description: ID модели в Hugging Face
          example: ""
        name:
          type: string
          description: Человекочитаемое название модели
          example: "Google: Gemini 2.5 Flash Lite Preview 09-2025"
        created:
          type: integer
          description: Unix timestamp создания модели
          example: 1758819686
        description:
          type: string
          description: Описание модели
          example: "Gemini 2.5 Flash-Lite is a lightweight reasoning model..."
        context_length:
          type: integer
          description: Максимальная длина контекста
          example: 1048576
        architecture:
          type: object
          description: Архитектура модели
          properties:
            modality:
              type: string
              example: "text+image->text"
            input_modalities:
              type: array
              items:
                type: string
              example: ["file", "image", "text", "audio"]
            output_modalities:
              type: array
              items:
                type: string
              example: ["text"]
            tokenizer:
              type: string
              example: "Gemini"
            instruct_type:
              type: string
              nullable: true
              example: null
        pricing_rub:
          type: object
          description: Цены в рублях
          properties:
            prompt:
              type: number
              description: Цена за входной токен
              example: 0.000009
            completion:
              type: number
              description: Цена за выходной токен
              example: 0.000036
            request:
              type: number
              description: Фиксированная цена за запрос
              example: 0
            image:
              type: number
              description: Цена за изображение
              example: 0
            web_search:
              type: number
              description: Цена за веб-поиск
              example: 0
            internal_reasoning:
              type: number
              description: Цена за внутренние рассуждения
              example: 0
        top_provider:
          type: object
          description: Информация о топ-провайдере
          properties:
            context_length:
              type: integer
              example: 1048576
            max_completion_tokens:
              type: integer
              example: 65536
            is_moderated:
              type: boolean
              example: false
        supported_parameters:
          type: array
          items:
            type: string
          description: Поддерживаемые параметры
          example: ["include_reasoning", "max_tokens", "reasoning", "response_format", "seed", "stop", "structured_outputs", "temperature", "tool_choice", "tools", "top_p"]
        default_parameters:
          type: object
          description: Параметры по умолчанию
          properties:
            temperature:
              type: number
              nullable: true
            top_p:
              type: number
              nullable: true
            frequency_penalty:
              type: number
              nullable: true

    FileInfo:
      type: object
      description: Информация о файле
      properties:
        id:
          type: string
          description: Уникальный идентификатор файла
          example: "file_123"
        name:
          type: string
          description: Оригинальное имя файла
          example: "document.pdf"
        type:
          type: string
          description: MIME-тип файла
          example: "application/pdf"
        url:
          type: string
          description: URL для доступа к файлу в облачном хранилище
          example: "https://gptutor-bucket.storage.yandexcloud.net/uuid.pdf"
        size:
          type: integer
          description: Размер файла в байтах
          example: 1024000
        createdAt:
          type: string
          format: date-time
          description: Дата и время загрузки файла
          example: "2024-01-15T10:30:00Z"

  responses:
    UnauthorizedError:
      description: Ошибка авторизации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid_api_key:
              summary: Неверный API ключ
              value:
                error: "Invalid API key or inactive user"
            missing_api_key:
              summary: Отсутствует API ключ
              value:
                error: "Missing or invalid Authorization header"

    Unauthorized:
      description: Ошибка VK авторизации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid_vk_auth:
              summary: Неверная VK авторизация
              value:
                error: "Invalid VK authorization"

    ValidationError:
      description: Ошибка валидации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            missing_messages:
              summary: Отсутствует массив messages
              value:
                error: "messages array is required"

    InsufficientBalance:
      description: Недостаточно средств
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            low_balance:
              summary: Недостаточно средств
              value:
                error: "Insufficient balance"

    InternalError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            server_error:
              summary: Ошибка сервера
              value:
                error: "Internal server error"
