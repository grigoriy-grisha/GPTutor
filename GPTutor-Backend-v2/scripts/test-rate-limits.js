#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/test-rate-limits.js [endpoint] [requests]
 */

const http = require('http');

const ENDPOINTS = {
  health: 'http://localhost:3001/health',
  models: 'http://localhost:3001/v1/models',
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};

const DEFAULT_REQUESTS = 10;
const DEFAULT_DELAY = 100; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    const req = http.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        const duration = Date.now() - startTime;
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data,
          duration: duration,
          rateLimitRemaining: res.headers['x-ratelimit-remaining'],
          rateLimitLimit: res.headers['x-ratelimit-limit'],
          rateLimitReset: res.headers['x-ratelimit-reset']
        });
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    req.setTimeout(5000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
  });
}

async function testRateLimit(endpoint, numRequests = DEFAULT_REQUESTS, delay = DEFAULT_DELAY) {
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting –¥–ª—è ${endpoint}`);
  console.log(`üìä –û—Ç–ø—Ä–∞–≤–∫–∞ ${numRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ${delay}ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏\n`);
  
  const results = [];
  const startTime = Date.now();
  
  for (let i = 0; i < numRequests; i++) {
    try {
      const result = await makeRequest(endpoint);
      results.push(result);
      
      const status = result.statusCode === 200 ? '‚úÖ' : 
                    result.statusCode === 429 ? 'üö´' : '‚ùå';
      
      console.log(`${status} –ó–∞–ø—Ä–æ—Å ${i + 1}: ${result.statusCode} (${result.duration}ms)`);
      
      if (result.rateLimitRemaining !== undefined) {
        console.log(`   Rate Limit: ${result.rateLimitRemaining}/${result.rateLimitLimit} (reset: ${new Date(result.rateLimitReset * 1000).toLocaleTimeString()})`);
      }
      
      if (result.statusCode === 429) {
        console.log(`   ‚ö†Ô∏è  Rate limit exceeded! Response: ${result.data}`);
      }
      
    } catch (error) {
      console.log(`‚ùå –ó–∞–ø—Ä–æ—Å ${i + 1}: –û—à–∏–±–∫–∞ - ${error.message}`);
      results.push({ error: error.message, statusCode: 0 });
    }
    
    if (i < numRequests - 1) {
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  const totalTime = Date.now() - startTime;
  const successfulRequests = results.filter(r => r.statusCode === 200).length;
  const rateLimitedRequests = results.filter(r => r.statusCode === 429).length;
  const errorRequests = results.filter(r => r.statusCode === 0).length;
  
  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successfulRequests}`);
  console.log(`   üö´ Rate limited: ${rateLimitedRequests}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorRequests}`);
  console.log(`   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
  console.log(`   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${Math.round(totalTime / numRequests)}ms`);
  
  if (rateLimitedRequests > 0) {
    console.log(`\nüéØ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${rateLimitedRequests} –∑–∞–ø—Ä–æ—Å–æ–≤.`);
  } else {
    console.log(`\n‚ö†Ô∏è  Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª. –í–æ–∑–º–æ–∂–Ω–æ, –ª–∏–º–∏—Ç—ã —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.`);
  }
}

async function main() {
  const args = process.argv.slice(2);
  const endpointName = args[0] || 'health';
  const numRequests = parseInt(args[1]) || DEFAULT_REQUESTS;
  const delay = parseInt(args[2]) || DEFAULT_DELAY;
  
  if (!ENDPOINTS[endpointName]) {
    console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${endpointName}`);
    console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: ${Object.keys(ENDPOINTS).join(', ')}`);
    process.exit(1);
  }
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting...');
  console.log(`–°–µ—Ä–≤–µ—Ä: ${ENDPOINTS[endpointName]}`);
  
  try {
    await testRateLimit(ENDPOINTS[endpointName], numRequests, delay);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { testRateLimit, makeRequest };

