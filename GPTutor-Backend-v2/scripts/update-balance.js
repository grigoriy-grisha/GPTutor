const readline = require('readline');

const API_BASE_URL = 'http://localhost:3001';
const ADMIN_SECRET_KEY = '123';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise((resolve) => {
    rl.question(query, resolve);
  });
}

async function updateBalance(userId, newBalance) {
  try {
    console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
    console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}‚ÇΩ`);

    const response = await fetch(`${API_BASE_URL}/admin/update-balance`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-admin-secret-key': ADMIN_SECRET_KEY,
      },
      body: JSON.stringify({
        userId: userId,
        newBalance: newBalance,
      }),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error || `HTTP error! status: ${response.status}`);
    }

    console.log('\n‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log(`   ID: ${data.user.id}`);
    console.log(`   –ë–∞–ª–∞–Ω—Å: ${data.user.balance}‚ÇΩ`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(data.user.updatedAt).toLocaleString('ru-RU')}`);
    console.log('');

    return data;
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error.message);
    console.error('');
    throw error;
  }
}

async function main() {
  console.log('='.repeat(50));
  console.log('üîß –°–∫—Ä–∏–ø—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('='.repeat(50));
  console.log('');

  try {
    const userIdInput = await question(`üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `);
    const userId = userIdInput.trim();

    const newBalanceStr = await question('üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (‚ÇΩ): ');
    const newBalance = parseFloat(newBalanceStr);

    if (isNaN(newBalance) || newBalance < 0) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      rl.close();
      process.exit(1);
    }

    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`   User ID / VK ID: ${userId}`);
    console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}‚ÇΩ`);
    console.log('');

    const confirm = await question('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ');

    if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
      console.log('\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      rl.close();
      process.exit(0);
    }

    await updateBalance(userId, newBalance);

  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

if (require.main === module) {
  main();
}

module.exports = { updateBalance };
